/* Generated By:JavaCC: Do not edit this line. ExpressionParserConstants.java */
package org.relique.jdbc.csv;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLELINECOMMENT = 8;
  /** RegularExpression Id. */
  int SELECT = 9;
  /** RegularExpression Id. */
  int DISTINCT = 10;
  /** RegularExpression Id. */
  int COMMA = 11;
  /** RegularExpression Id. */
  int DOT = 12;
  /** RegularExpression Id. */
  int UNSIGNEDINT = 13;
  /** RegularExpression Id. */
  int UNSIGNEDNUMBER = 14;
  /** RegularExpression Id. */
  int DIGITS = 15;
  /** RegularExpression Id. */
  int EXPONENT = 16;
  /** RegularExpression Id. */
  int TYPESUFFIX = 17;
  /** RegularExpression Id. */
  int NULL = 18;
  /** RegularExpression Id. */
  int CURRENT_DATE = 19;
  /** RegularExpression Id. */
  int CURRENT_TIME = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int OR = 22;
  /** RegularExpression Id. */
  int NOT = 23;
  /** RegularExpression Id. */
  int IS = 24;
  /** RegularExpression Id. */
  int AS = 25;
  /** RegularExpression Id. */
  int LIKE = 26;
  /** RegularExpression Id. */
  int ESCAPE = 27;
  /** RegularExpression Id. */
  int BETWEEN = 28;
  /** RegularExpression Id. */
  int IN = 29;
  /** RegularExpression Id. */
  int EXISTS = 30;
  /** RegularExpression Id. */
  int CASE = 31;
  /** RegularExpression Id. */
  int WHEN = 32;
  /** RegularExpression Id. */
  int THEN = 33;
  /** RegularExpression Id. */
  int ELSE = 34;
  /** RegularExpression Id. */
  int END = 35;
  /** RegularExpression Id. */
  int PLACEHOLDER = 36;
  /** RegularExpression Id. */
  int ASC = 37;
  /** RegularExpression Id. */
  int DESC = 38;
  /** RegularExpression Id. */
  int DAYOFMONTH = 39;
  /** RegularExpression Id. */
  int MONTH = 40;
  /** RegularExpression Id. */
  int YEAR = 41;
  /** RegularExpression Id. */
  int HOUROFDAY = 42;
  /** RegularExpression Id. */
  int MINUTE = 43;
  /** RegularExpression Id. */
  int SECOND = 44;
  /** RegularExpression Id. */
  int LOWER = 45;
  /** RegularExpression Id. */
  int ROUND = 46;
  /** RegularExpression Id. */
  int UPPER = 47;
  /** RegularExpression Id. */
  int TRIM = 48;
  /** RegularExpression Id. */
  int LTRIM = 49;
  /** RegularExpression Id. */
  int RTRIM = 50;
  /** RegularExpression Id. */
  int SUBSTRING = 51;
  /** RegularExpression Id. */
  int REPLACE = 52;
  /** RegularExpression Id. */
  int LENGTH = 53;
  /** RegularExpression Id. */
  int NULLIF = 54;
  /** RegularExpression Id. */
  int ABS = 55;
  /** RegularExpression Id. */
  int COALESCE = 56;
  /** RegularExpression Id. */
  int COUNT = 57;
  /** RegularExpression Id. */
  int MAX = 58;
  /** RegularExpression Id. */
  int MIN = 59;
  /** RegularExpression Id. */
  int SUM = 60;
  /** RegularExpression Id. */
  int AVG = 61;
  /** RegularExpression Id. */
  int STRING_AGG = 62;
  /** RegularExpression Id. */
  int FROM = 63;
  /** RegularExpression Id. */
  int LEFT = 64;
  /** RegularExpression Id. */
  int RIGHT = 65;
  /** RegularExpression Id. */
  int FULL = 66;
  /** RegularExpression Id. */
  int INNER = 67;
  /** RegularExpression Id. */
  int OUTER = 68;
  /** RegularExpression Id. */
  int JOIN = 69;
  /** RegularExpression Id. */
  int ON = 70;
  /** RegularExpression Id. */
  int CROSS = 71;
  /** RegularExpression Id. */
  int WHERE = 72;
  /** RegularExpression Id. */
  int GROUP = 73;
  /** RegularExpression Id. */
  int ORDER = 74;
  /** RegularExpression Id. */
  int BY = 75;
  /** RegularExpression Id. */
  int HAVING = 76;
  /** RegularExpression Id. */
  int LIMIT = 77;
  /** RegularExpression Id. */
  int OFFSET = 78;
  /** RegularExpression Id. */
  int NAME = 79;
  /** RegularExpression Id. */
  int STRING = 80;
  /** RegularExpression Id. */
  int GREATERTHAN = 81;
  /** RegularExpression Id. */
  int LESSTHAN = 82;
  /** RegularExpression Id. */
  int GREATERTHANEQUALS = 83;
  /** RegularExpression Id. */
  int LESSTHANEQUALS = 84;
  /** RegularExpression Id. */
  int NOTEQUALS = 85;
  /** RegularExpression Id. */
  int EQUALS = 86;
  /** RegularExpression Id. */
  int ASTERISK = 87;
  /** RegularExpression Id. */
  int NAMEASTERISK = 88;
  /** RegularExpression Id. */
  int MINUS = 89;
  /** RegularExpression Id. */
  int PLUS = 90;
  /** RegularExpression Id. */
  int DIVIDE = 91;
  /** RegularExpression Id. */
  int MODULO = 92;
  /** RegularExpression Id. */
  int CONCAT = 93;
  /** RegularExpression Id. */
  int OPENPARENTHESIS = 94;
  /** RegularExpression Id. */
  int CLOSEPARENTHESIS = 95;
  /** RegularExpression Id. */
  int SEMICOLON = 96;
  /** RegularExpression Id. */
  int TABLENAME = 101;
  /** RegularExpression Id. */
  int QUOTEDTABLENAME = 102;
  /** RegularExpression Id. */
  int DERIVEDTABLEOPENPARENTHESIS = 103;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 104;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_C_COMMENT = 1;
  /** Lexical state. */
  int IN_TABLE = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "<SINGLELINECOMMENT>",
    "\"SELECT\"",
    "\"DISTINCT\"",
    "\",\"",
    "\".\"",
    "<UNSIGNEDINT>",
    "<UNSIGNEDNUMBER>",
    "<DIGITS>",
    "<EXPONENT>",
    "\"L\"",
    "\"NULL\"",
    "\"CURRENT_DATE\"",
    "\"CURRENT_TIME\"",
    "\"AND\"",
    "\"OR\"",
    "\"NOT\"",
    "\"IS\"",
    "\"AS\"",
    "\"LIKE\"",
    "\"ESCAPE\"",
    "\"BETWEEN\"",
    "\"IN\"",
    "\"EXISTS\"",
    "\"CASE\"",
    "\"WHEN\"",
    "\"THEN\"",
    "\"ELSE\"",
    "\"END\"",
    "\"?\"",
    "\"ASC\"",
    "\"DESC\"",
    "\"DAYOFMONTH\"",
    "\"MONTH\"",
    "\"YEAR\"",
    "\"HOUROFDAY\"",
    "\"MINUTE\"",
    "\"SECOND\"",
    "\"LOWER\"",
    "\"ROUND\"",
    "\"UPPER\"",
    "\"TRIM\"",
    "\"LTRIM\"",
    "\"RTRIM\"",
    "\"SUBSTRING\"",
    "\"REPLACE\"",
    "\"LENGTH\"",
    "\"NULLIF\"",
    "\"ABS\"",
    "\"COALESCE\"",
    "\"COUNT\"",
    "\"MAX\"",
    "\"MIN\"",
    "\"SUM\"",
    "\"AVG\"",
    "\"STRING_AGG\"",
    "\"FROM\"",
    "\"LEFT\"",
    "\"RIGHT\"",
    "\"FULL\"",
    "\"INNER\"",
    "\"OUTER\"",
    "\"JOIN\"",
    "\"ON\"",
    "\"CROSS\"",
    "\"WHERE\"",
    "\"GROUP\"",
    "\"ORDER\"",
    "\"BY\"",
    "\"HAVING\"",
    "\"LIMIT\"",
    "\"OFFSET\"",
    "<NAME>",
    "<STRING>",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "<NOTEQUALS>",
    "\"=\"",
    "\"*\"",
    "<NAMEASTERISK>",
    "\"-\"",
    "\"+\"",
    "\"/\"",
    "\"%\"",
    "\"||\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<TABLENAME>",
    "<QUOTEDTABLENAME>",
    "\"(\"",
    "<UNEXPECTED_CHAR>",
  };

}
