/* Generated By:JavaCC: Do not edit this line. ExpressionParserTokenManager.java */
package org.relique.jdbc.csv;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.util.Map;
import java.util.List;
import java.util.LinkedList;

/** Token Manager. */
public class ExpressionParserTokenManager implements ExpressionParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x140000L) != 0L)
            return 8;
         if ((active1 & 0x2000000L) != 0L)
            return 13;
         if ((active0 & 0xffffffeffffc0600L) != 0L || (active1 & 0x7fffL) != 0L)
         {
            jjmatchedKind = 79;
            return 66;
         }
         return -1;
      case 1:
         if ((active0 & 0x2023400000L) != 0L || (active1 & 0xc48L) != 0L)
            return 66;
         if ((active0 & 0xffffffcfdcbc0600L) != 0L || (active1 & 0x73b7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 79;
               jjmatchedPos = 1;
            }
            return 66;
         }
         return -1;
      case 2:
         if ((active0 & 0x3c80082800a00000L) != 0L)
            return 66;
         if ((active0 & 0xc37ff7c7dc1c0600L) != 0L || (active1 & 0x77bfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 79;
               jjmatchedPos = 2;
            }
            return 66;
         }
         return -1;
      case 3:
         if ((active0 & 0x8041024784040000L) != 0L || (active1 & 0x25L) != 0L)
            return 66;
         if ((active0 & 0x433efd8058180600L) != 0L || (active1 & 0x779aL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 79;
               jjmatchedPos = 3;
            }
            return 66;
         }
         return -1;
      case 4:
         if ((active0 & 0x206e10000000000L) != 0L || (active1 & 0x279aL) != 0L)
            return 66;
         if ((active0 & 0x41781c8058180600L) != 0L || (active1 & 0x5000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
            return 66;
         }
         return -1;
      case 5:
         if ((active0 & 0x60180048000200L) != 0L || (active1 & 0x5000L) != 0L)
            return 66;
         if ((active0 & 0x4118048010180400L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
            return 66;
         }
         return -1;
      case 6:
         if ((active0 & 0x10000010000000L) != 0L)
            return 66;
         if ((active0 & 0x4108048000180400L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 6;
            return 66;
         }
         return -1;
      case 7:
         if ((active0 & 0x4008048000180000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
            return 66;
         }
         if ((active0 & 0x100000000000400L) != 0L)
            return 66;
         return -1;
      case 8:
         if ((active0 & 0x8040000000000L) != 0L)
            return 66;
         if ((active0 & 0x4000008000180000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 8;
            return 66;
         }
         return -1;
      case 9:
         if ((active0 & 0x180000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 9;
            return 66;
         }
         if ((active0 & 0x4000008000000000L) != 0L)
            return 66;
         return -1;
      case 10:
         if ((active0 & 0x180000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 10;
            return 66;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 92);
      case 40:
         return jjStopAtPos(0, 94);
      case 41:
         return jjStopAtPos(0, 95);
      case 42:
         return jjStopAtPos(0, 87);
      case 43:
         return jjStopAtPos(0, 90);
      case 44:
         return jjStopAtPos(0, 11);
      case 45:
         return jjStartNfaWithStates_0(0, 89, 13);
      case 47:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 59:
         return jjStopAtPos(0, 96);
      case 60:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 61:
         return jjStopAtPos(0, 86);
      case 62:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 63:
         return jjStopAtPos(0, 36);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2080002002200000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x300000080180000L, 0x80L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc000000400L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc48000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x4L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x21000000L, 0x8L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x22200004000000L, 0x2001L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc00090000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000840000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x4450L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x14400000000000L, 0x2L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x5008100000000200L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000200000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x100L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400008080000000L, active1, 0x1000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x30124010000200L, active1, 0x1L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0x100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800080004000400L, active1, 0x2002L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 66);
         return jjMoveStringLiteralDfa2_0(active0, 0x800200000L, active1, 0x8L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x300650000800000L, active1, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8001000000000000L, active1, 0x680L);
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 66);
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2008000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4006000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10480000001c0000L, active1, 0x14L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 75, 66);
         break;
      case 124:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100020000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x100008000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 66);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000L, active1, 0x100L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4001L);
      case 71:
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000040000000L, active1, 0x20L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000040200L, active1, 0x4L);
      case 77:
      case 109:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20090000000000L, active1, 0x8L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x280L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4006000000180000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x4480000400L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200440000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 66);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 66);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 66);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 66);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000000200L, active1, 0x418L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4006000000000000L, active1, 0x3000L);
      case 76:
      case 108:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x150000000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 66);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 66);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 66);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 66);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x200400000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x108000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000180000L, active1, 0x100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000040000000L, active1, 0x4080L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000400L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x200L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 66);
         break;
      case 69:
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000010180000L, active1, 0x4000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 66);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000400L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 66);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 66);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000100000000000L, active1, 0x1000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 80:
      case 112:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 66);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 66);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 66);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 66);
         break;
      case 83:
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 66);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 66);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 66);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x28080040000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 66);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 66);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 71:
      case 103:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 66);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x180400L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 66);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 66);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 66);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000040000000000L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 66);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8008000000000L);
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 71:
      case 103:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 66);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000100000L);
      case 89:
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 71:
      case 103:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 62, 66);
         break;
      case 72:
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 39, 66);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(11, 19, 66);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 20, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 66;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(16, 20);
                  if (curChar == 45)
                     jjCheckNAdd(14);
                  break;
               case 0:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 10);
                  else if (curChar == 45)
                     jjAddStates(11, 12);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(13, 21);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 66:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 44);
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAdd(41);
                  }
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 80)
                     kind = 80;
                  break;
               case 8:
                  if (curChar == 62 && kind > 85)
                     kind = 85;
                  break;
               case 9:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 61 && kind > 85)
                     kind = 85;
                  break;
               case 11:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 45)
                     jjAddStates(11, 12);
                  break;
               case 14:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(22, 25);
                  break;
               case 15:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(26, 28);
                  break;
               case 16:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 17:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 18:
               case 20:
                  if (curChar == 13)
                     jjCheckNAdd(17);
                  break;
               case 19:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(16, 20);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(13, 21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar != 46)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddStates(0, 2);
                  break;
               case 41:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 44);
                  break;
               case 43:
                  if (curChar == 42 && kind > 88)
                     kind = 88;
                  break;
               case 44:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 10);
                  break;
               case 46:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar != 34)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 50:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 52:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar != 34)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(58, 44);
                  break;
               case 58:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 60:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 34)
                     jjCheckNAdd(44);
                  break;
               case 62:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(64, 44);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddStates(0, 2);
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 44);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAdd(41);
                  }
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 6:
                  jjAddStates(31, 32);
                  break;
               case 15:
                  if (kind > 8)
                     kind = 8;
                  jjAddStates(26, 28);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 39:
                  if ((0x100000001000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 44);
                  break;
               case 46:
                  jjAddStates(39, 40);
                  break;
               case 50:
                  jjAddStates(41, 42);
                  break;
               case 52:
                  jjAddStates(43, 44);
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  jjAddStates(45, 46);
                  break;
               case 60:
                  jjAddStates(47, 48);
                  break;
               case 62:
                  jjAddStates(49, 50);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(31, 32);
                  break;
               case 15:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjAddStates(26, 28);
                  break;
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(39, 40);
                  break;
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 42);
                  break;
               case 52:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 44);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(45, 46);
                  break;
               case 60:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(47, 48);
                  break;
               case 62:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(49, 50);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 66 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 103);
      default :
         return jjMoveNfa_2(1, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xf7ffecfeffffd9ffL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 34)
                     jjCheckNAdd(2);
                  break;
               case 0:
                  if ((0xf7ffecfeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 34 && kind > 102)
                     kind = 102;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  jjAddStates(51, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(51, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   41, 42, 44, 46, 47, 52, 53, 56, 57, 62, 63, 13, 19, 22, 23, 24, 
   27, 28, 33, 34, 38, 39, 14, 15, 16, 18, 15, 16, 18, 3, 4, 6, 
   7, 25, 26, 31, 32, 36, 37, 46, 47, 50, 51, 52, 53, 56, 57, 60, 
   61, 62, 63, 2, 3, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, "\54", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\77", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\76", 
"\74", "\76\75", "\74\75", null, "\75", "\52", null, "\55", "\53", "\57", "\45", 
"\174\174", "\50", "\51", "\73", null, null, null, null, null, null, "\50", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_C_COMMENT",
   "IN_TABLE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 0, 0, 0, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffc6e01L, 0x1e1ffffffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x1e00000000L, 
};
static final long[] jjtoSpecial = {
   0x100L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[66];
private final int[] jjstateSet = new int[132];
protected char curChar;
/** Constructor. */
public ExpressionParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ExpressionParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 66; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 104)
       {
          jjmatchedKind = 104;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 7)
       {
          jjmatchedKind = 7;
       }
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 104)
       {
          jjmatchedKind = 104;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
